package receipt_scanner_bot;

import java.util.List;

import org.springframework.stereotype.Component;

import receipt_scanner_bot.dto.PriceHistoryDTO;
import receipt_scanner_bot.dto.ProductDetailStatsDTO;
import receipt_scanner_bot.dto.ProductStatsDTO;

@Component
public class StatsFormatter {
	
	public String formatAllProductsStats(List<ProductStatsDTO> stats) {
        if (stats.isEmpty()) {
            return "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–∫–æ–≤.";
        }
        
        StringBuilder result = new StringBuilder();
        result.append("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ü–†–û–î–£–ö–¢–ê–ú:\n\n");
        
        int rank = 1;
        for (ProductStatsDTO stat : stats) {
            result.append(String.format("%d.  ‚Üí  %.2f ‚ÇΩ    (%d —à—Ç.)\n", 
                rank, stat.totalAmount().doubleValue(), stat.totalQuantity()));
            result.append(String.format("   %s\n\n", stat.productName()));
            rank++;
        }
        
        return result.toString();
    }
    
    public String formatProductDetailStats(ProductDetailStatsDTO stats) {
        StringBuilder result = new StringBuilder();
        result.append(String.format("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: %s\n\n", stats.productName().toUpperCase()));
        
        // –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        result.append("üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ");
        result.append(String.format("%.2f - %.2f —Ä—É–±.\n", 
            stats.minPrice().doubleValue(), stats.maxPrice().doubleValue()));
        result.append(String.format("   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: %.2f —Ä—É–±.\n", stats.averagePrice().doubleValue()));
        result.append(String.format("   ‚Ä¢ –†–∞–∑–±—Ä–æ—Å: %.2f —Ä—É–±.\n\n", stats.priceSpread().doubleValue()));
        
        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        result.append(" –û–±—â–∏–π —Ç—Ä–µ–Ω–¥:\n");
        result.append(stats.trend() + "\n");
        result.append(String.format("   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %d\n", stats.recordCount()));
        result.append(String.format("   ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: %s - %s\n\n", 
            stats.firstDate(), stats.lastDate()));
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
        result.append("üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:\n");
        int displayCount = Math.min(stats.priceHistory().size(), 5);
        List<PriceHistoryDTO> recentPrices = stats.priceHistory().subList(
            stats.priceHistory().size() - displayCount, stats.priceHistory().size());
        
        for (PriceHistoryDTO price : recentPrices) {
            result.append(String.format("   ‚Ä¢ %s: %.2f —Ä—É–±. %s\n", 
                price.date(), price.price(), price.change()));
        }
        
        return result.toString();
    }
	
    public String formatProducts(List<Product> products) {
        StringBuilder sb = new StringBuilder();
        sb.append("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n");
        sb.append("üì¶ –ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n");
        
        for (Product p : products) {
            sb.append("‚Ä¢ ");
            sb.append(p.toString());
            sb.append("\n");
        }
        
        sb.append("\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
        return sb.toString();
    }
    
}

