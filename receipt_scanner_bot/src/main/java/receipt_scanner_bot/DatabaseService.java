package receipt_scanner_bot;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import receipt_scanner_bot.dto.PriceHistoryDTO;
import receipt_scanner_bot.dto.ProductDetailStatsDTO;
import receipt_scanner_bot.dto.ProductStatsDTO;
import receipt_scanner_bot.dto.TrendDTO;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional
public class DatabaseService {
    
    private final PurchaseDetailRepository purchaseDetailRepository;
    private final ProductStatRepository productStatRepository;
    
    public DatabaseService(PurchaseDetailRepository purchaseDetailRepository,
                          ProductStatRepository productStatRepository) {
        this.purchaseDetailRepository = purchaseDetailRepository;
        this.productStatRepository = productStatRepository;
    }
    
    @Transactional
    public void saveProducts(List<Product> products) {
    	
        try {
            List<PurchaseDetailEntity> purchaseDetails = new ArrayList<>();
            List<ProductStatEntity> productStats = new ArrayList<>();
            
            for (Product product : products) {
                purchaseDetails.add(convertToPurchaseDetail(product));
                productStats.add(convertToProductStat(product));
            }
            
            purchaseDetailRepository.saveAll(purchaseDetails);
            productStatRepository.saveAll(productStats);
            
        } catch (Exception e) {
            throw new RuntimeException("Failed to save products", e);
        }
    }
    
    @Transactional(readOnly = true)
    public List<ProductStatsDTO> getStatsForAllProducts() {
        List<PurchaseDetailEntity> allPurchases = purchaseDetailRepository.findAllByOrderByPurchaseDateAscProductNameAsc();
        
        if (allPurchases.isEmpty()) {
            return List.of(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        }
        
        return allPurchases.stream()
            .collect(Collectors.groupingBy(
                PurchaseDetailEntity::getProductName,
                Collectors.collectingAndThen(
                    Collectors.toList(),
                    list -> {
                        int totalQuantity = list.stream().mapToInt(PurchaseDetailEntity::getQuantity).sum();
                        BigDecimal totalAmount = list.stream()
                            .map(PurchaseDetailEntity::getPrice)
                            .reduce(BigDecimal.ZERO, BigDecimal::add);
                        return new ProductStatsDTO(
                            list.get(0).getProductName(), // –ë–µ—Ä–µ–º –∏–º—è –∏–∑ –ª—é–±–æ–π –∑–∞–ø–∏—Å–∏
                            totalQuantity, 
                            totalAmount
                        );
                    }
                )
            ))
            .values().stream()
            .sorted((p1, p2) -> p2.totalAmount().compareTo(p1.totalAmount()))
            .collect(Collectors.toList());
    }
    
    @Transactional(readOnly = true)
    public Optional<ProductDetailStatsDTO> getStatsForProduct(String productName) {
        List<ProductStatEntity> stats = productStatRepository.findByProductNameOrderByStatDateAsc(productName);
        
        if (stats.isEmpty()) {
            return Optional.empty();
        }
        
        // –í—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        BigDecimal minPrice = stats.stream()
            .map(ProductStatEntity::getUnitPrice)
            .min(BigDecimal::compareTo)
            .orElse(BigDecimal.ZERO);
            
        BigDecimal maxPrice = stats.stream()
            .map(ProductStatEntity::getUnitPrice)
            .max(BigDecimal::compareTo)
            .orElse(BigDecimal.ZERO);
            
        BigDecimal averagePrice = stats.stream()
            .map(ProductStatEntity::getUnitPrice)
            .reduce(BigDecimal.ZERO, BigDecimal::add)
            .divide(BigDecimal.valueOf(stats.size()), 2, RoundingMode.HALF_UP);
        
        TrendDTO trend = calculateTrend(stats);
        List<PriceHistoryDTO> priceHistory = buildPriceHistory(stats);
        
        return Optional.of(new ProductDetailStatsDTO(
            productName,
            minPrice,
            maxPrice,
            averagePrice,
            maxPrice.subtract(minPrice),
            formatTrend(trend), // –¢–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            stats.size(),
            stats.get(0).getStatDate(),
            stats.get(stats.size()-1).getStatDate(),
            priceHistory
        ));
    }
    
    // –õ–æ–≥–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DTO, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É)
    private TrendDTO calculateTrend(List<ProductStatEntity> stats) {
        if (stats.size() < 2) {
            return new TrendDTO(BigDecimal.ZERO, BigDecimal.ZERO, 0, "STABLE");
        }
        
        BigDecimal firstPrice = stats.get(0).getUnitPrice();
        BigDecimal lastPrice = stats.get(stats.size() - 1).getUnitPrice();
        BigDecimal change = lastPrice.subtract(firstPrice);
        BigDecimal percentChange = change.divide(firstPrice, 4, RoundingMode.HALF_UP)
                                       .multiply(BigDecimal.valueOf(100));
        
        long daysBetween = ChronoUnit.DAYS.between(
            stats.get(0).getStatDate(), 
            stats.get(stats.size() - 1).getStatDate()
        );
        
        String direction = change.compareTo(BigDecimal.ZERO) > 0 ? "UP" : 
                          change.compareTo(BigDecimal.ZERO) < 0 ? "DOWN" : "STABLE";
        
        return new TrendDTO(change, percentChange, daysBetween, direction);
    }
    
    // –õ–æ–≥–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
    private List<PriceHistoryDTO> buildPriceHistory(List<ProductStatEntity> stats) {
        List<PriceHistoryDTO> history = new ArrayList<>();
        
        for (int i = 0; i < stats.size(); i++) {
            ProductStatEntity current = stats.get(i);
            String change = i > 0 ? calculatePriceChange(stats.get(i-1).getUnitPrice(), current.getUnitPrice()) : "";
            
            history.add(new PriceHistoryDTO(
                current.getStatDate(),
                current.getUnitPrice(),
                change
            ));
        }
        
        return history;
    }
    
    // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    private String calculatePriceChange(BigDecimal previousPrice, BigDecimal currentPrice) {
        if (previousPrice.compareTo(BigDecimal.ZERO) == 0) return "";
        
        BigDecimal change = currentPrice.subtract(previousPrice);
        BigDecimal percent = change.divide(previousPrice, 4, RoundingMode.HALF_UP)
                                 .multiply(BigDecimal.valueOf(100));
        
        if (change.compareTo(BigDecimal.ZERO) > 0) {
            return String.format("( ‚Üë +%.1f%%)", percent.doubleValue());
        } else if (change.compareTo(BigDecimal.ZERO) < 0) {
            return String.format("( ‚Üì %.1f%%)", percent.doubleValue());
        } else {
            return "(‚Üí 0%)";
        }
    }
    
    // –¢–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –≤ —Å—Ç—Ä–æ–∫—É
    private String formatTrend(TrendDTO trend) {
        return switch (trend.direction()) {
            case "UP" -> String.format("üìà –†–æ—Å—Ç +%.2f —Ä—É–±. (+%.1f%%) –∑–∞ %d –¥–Ω–µ–π", 
                trend.changeAmount().doubleValue(), trend.changePercent().doubleValue(), trend.daysBetween());
            case "DOWN" -> String.format("üìâ –°–Ω–∏–∂–µ–Ω–∏–µ %.2f —Ä—É–±. (%.1f%%) –∑–∞ %d –¥–Ω–µ–π", 
                trend.changeAmount().doubleValue(), trend.changePercent().doubleValue(), trend.daysBetween());
            default -> "‚û°Ô∏è –¶–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞";
        };
    }
    /*
    //prodname, quantity sum, amount sum (multiple products)
    //–ø–æ –∏–¥–µ–µ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞–ø—É (—Å—Ç—Ä–æ–∫–∞, —Å—Ç–∞—Ç–∫–∞: –∫–æ–ª-–≤–æ, —Ü–µ–Ω–∞)
    //–∞ –ø–æ—á–µ–º—É –Ω–µ –º–∞—Å—Å–∏–≤?
    @Transactional(readOnly = true)
    public String getStatsForAllProducts() {
        List<PurchaseDetailEntity> allPurchases = purchaseDetailRepository.findAllByOrderByPurchaseDateAscProductNameAsc();
        
        if (allPurchases.isEmpty()) {
        	//—Ç—É—Ç –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–∏–ª–∏ –ª–æ–≥ –æ—à–∏–±–∫–∏?)
            return "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–∫–æ–≤.";
        }
        
        StringBuilder stats = new StringBuilder();
        stats.append("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ü–†–û–î–£–ö–¢–ê–ú:\n\n");
        
        //map<string, abstractMap.simpleEntry<Integer, BigDecimal>
        Map<String, AbstractMap.SimpleEntry<Integer, BigDecimal>> productStats = allPurchases.stream()
                .collect(Collectors.groupingBy(
                    PurchaseDetailEntity::getProductName,
                    Collectors.collectingAndThen(
                        Collectors.toList(),
                        list -> {
                            int totalQuantity = list.stream().mapToInt(PurchaseDetailEntity::getQuantity).sum();
                            BigDecimal totalAmount = list.stream()
                                .map(PurchaseDetailEntity::getPrice)
                                .reduce(BigDecimal.ZERO, BigDecimal::add);
                            return new AbstractMap.SimpleEntry<>(totalQuantity, totalAmount);
                        }
                    )
                ));
        
        //from this point on data representation 
        int rank = 1;
        for (var entry : productStats.entrySet().stream()
                .sorted((e1, e2) -> e2.getValue().getValue().compareTo(e1.getValue().getValue()))
                .collect(Collectors.toList())) {
            
            String productName = entry.getKey();
            int totalQuantity = entry.getValue().getKey();
            BigDecimal totalSpent = entry.getValue().getValue();
            
            stats.append(String.format("%d.  ‚Üí  %.2f ‚ÇΩ    (%d —à—Ç.)\n", 
            	    rank, totalSpent.doubleValue(), totalQuantity));
            stats.append(String.format("   %s\n\n", productName));
            rank++;
        }
        
        return stats.toString();
    }
    
    //new exception if the stats is empty (or logs?)
    //prodname, unit price, trend 
    //didnt you already get all the stats wrapped in entity classes (you're getting a list from db
    //except for the trend (can the entity class have field that aren't annotated with columns) 
    //trend can be separated and passed onto gui methods /classes
    //–µ—Å—Ç—å –µ—â–µ —Ä–∞–∑–±–æ—Ä, —Å—Ä–µ–¥–Ω–µ–µ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω (–≤ –≤–∏–¥–µ –º–∏–Ω –∏ –º–∞–∫—Å —Ü–µ–Ω—ã)
    @Transactional(readOnly = true)
    public String getStatsForProduct(String productName) {
        List<ProductStatEntity> stats = productStatRepository.findByProductNameOrderByStatDateAsc(productName);
        
        if (stats.isEmpty()) {
            return "‚ùå –ü—Ä–æ–¥—É–∫—Ç '" + productName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n" +
                   "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.";
        }
        
        return buildProductStatistics(stats, productName);
    }
    
    private String buildProductStatistics(List<ProductStatEntity> stats, String productName) {
        StringBuilder result = new StringBuilder();
        
        // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        //—Ç—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bigdec –≤ double
        DoubleSummaryStatistics priceStats = stats.stream()
            .mapToDouble(s -> s.getUnitPrice().doubleValue())
            .summaryStatistics();
        
        // –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞
        String trend = calculateTrend(stats);
        
        result.append(String.format("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: %s\n\n", productName.toUpperCase()));
        
        // –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        result.append("üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ");
        //result.append(String.format("   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: %.2f —Ä—É–±.\n", priceStats.getMin()));
        //result.append(String.format("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: %.2f —Ä—É–±.\n", priceStats.getMax()));
        result.append(String.format("%.2f - %.2f —Ä—É–±.\n", priceStats.getMin(), priceStats.getMax()));
        result.append(String.format("   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: %.2f —Ä—É–±.\n", priceStats.getAverage()));
        result.append(String.format("   ‚Ä¢ –†–∞–∑–±—Ä–æ—Å: %.2f —Ä—É–±.\n\n", priceStats.getMax() - priceStats.getMin()));
        
        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        result.append(" –û–±—â–∏–π —Ç—Ä–µ–Ω–¥:\n");
        result.append(trend + "\n");
        result.append(String.format("   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %d\n", stats.size()));
        result.append(String.format("   ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: %s - %s\n\n", 
            stats.get(0).getStatDate(), stats.get(stats.size()-1).getStatDate()));
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
        result.append("üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:\n");
        int displayCount = Math.min(stats.size(), 5);
        for (int i = stats.size() - displayCount; i < stats.size(); i++) {
            ProductStatEntity stat = stats.get(i);
            String change = i > 0 ? calculatePriceChange(stats.get(i-1).getUnitPrice(), stat.getUnitPrice()) : "";
            result.append(String.format("   ‚Ä¢ %s: %.2f —Ä—É–±. %s\n", 
                stat.getStatDate(), stat.getUnitPrice(), change));
        }
        
        return result.toString();
    }
    
    //—Ç—É—Ç bigdec
    private String calculateTrend(List<ProductStatEntity> stats) {
        if (stats.size() < 2) {
            return "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞";
        }
        
        BigDecimal firstPrice = stats.get(0).getUnitPrice();
        BigDecimal lastPrice = stats.get(stats.size() - 1).getUnitPrice();
        BigDecimal change = lastPrice.subtract(firstPrice);
        BigDecimal percentChange = change.divide(firstPrice, 4, RoundingMode.HALF_UP)
                                       .multiply(BigDecimal.valueOf(100));
        
        long daysBetween = ChronoUnit.DAYS.between(
            stats.get(0).getStatDate(), 
            stats.get(stats.size() - 1).getStatDate()
        );
        
        //—Ä–∞–∑–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ –Ω—É–ª—è —Ä–∞–∑–Ω–∏—Ü—ã
        if (change.compareTo(BigDecimal.ZERO) > 0) {
            return String.format("üìà –†–æ—Å—Ç +%.2f —Ä—É–±. (+%.1f%%) –∑–∞ %d –¥–Ω–µ–π", 
                change.doubleValue(), percentChange.doubleValue(), daysBetween);
        } else if (change.compareTo(BigDecimal.ZERO) < 0) {
            return String.format("üìâ –°–Ω–∏–∂–µ–Ω–∏–µ %.2f —Ä—É–±. (%.1f%%) –∑–∞ %d –¥–Ω–µ–π", 
                change.doubleValue(), percentChange.doubleValue(), daysBetween);
        } else {
            return "‚û°Ô∏è –¶–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞";
        }
    }
    
    //—Ç—É—Ç —Ä–∞–±–æ—Ç–∞ —Å bigdec
    private String calculatePriceChange(BigDecimal previousPrice, BigDecimal currentPrice) {
        BigDecimal change = currentPrice.subtract(previousPrice);
        BigDecimal percent = change.divide(previousPrice, 4, RoundingMode.HALF_UP)
                                 .multiply(BigDecimal.valueOf(100));
        
        //—Ç—É—Ç —Ç–∞–∫–∂–µ –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        if (change.compareTo(BigDecimal.ZERO) > 0) {
            return String.format("( ‚Üë +%.1f%%)", percent.doubleValue());
        } else if (change.compareTo(BigDecimal.ZERO) < 0) {
            return String.format("( ‚Üì %.1f%%)", percent.doubleValue());
        } else {
            return "(‚Üí 0%)";
        }
    }
   
    @Transactional(readOnly = true)
    public List<String> getAllProductNames() {
        return purchaseDetailRepository.findDistinctProductNames();
    }
    */
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    //—Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü
    private PurchaseDetailEntity convertToPurchaseDetail(Product product) {
        return new PurchaseDetailEntity(
            product.getName(),
            product.getQuantity(),
            BigDecimal.valueOf(product.getTotalPrice()),
            product.getDate()
        );
    }
    
    private ProductStatEntity convertToProductStat(Product product) {
        return new ProductStatEntity(
            product.getName(),
            BigDecimal.valueOf(product.getPricePerUnit()),
            product.getDate()
        );
    }
}