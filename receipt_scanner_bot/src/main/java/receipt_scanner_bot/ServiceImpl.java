package receipt_scanner_bot;

import java.io.IOException;
import java.util.List;

import org.springframework.stereotype.Service;

@Service
public class ServiceImpl implements ReceiptService {
    
    private final Client client;
    private final Parser parser;
    private final DatabaseService databaseService;
    private final StatsFormatter statsFormatter;
    
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å dependency injection
    //why are constractors different
    public ServiceImpl(Client client, Parser parser, DatabaseService databaseService, StatsFormatter statsFormatter) {
        this.client = client;
        this.parser = parser;
        this.databaseService = databaseService;
        this.statsFormatter = statsFormatter;
    }
    
    @Override
    public String getStatsForAllProducts() {
        return databaseService.getStatsForAllProducts();
    }
    
    @Override
    public String getStatsForOneProduct(String productname) {
        return databaseService.getStatsForProduct(productname);
    }
    
    @Override
    public String uploadReceipt(String checkqrcode) {
        String productsAsString = "";
        try {
            String responsexml = client.getReceiptData(checkqrcode);
            List<Product> products = parser.parse(responsexml);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            databaseService.saveProducts(products);
            
            //–≤—ã–Ω–µ—Å—Ç–∏ –≤ –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å
            productsAsString = statsFormatter.formatProducts(products);
            //–¥–æ–ª–∂–Ω–∞ –ª–∏ —è –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥, –æ–Ω –∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–∏–Ω–≥—É
            
            
        } catch (IOException e) {
            e.printStackTrace();
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: " + e.getMessage();
        }
        return productsAsString;
    }
    /*
    public String printProducts(List<Product> products) {
        StringBuilder sb = new StringBuilder();
        sb.append("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n");
        sb.append("üì¶ –ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n");
        
        for(Product p : products) {
            sb.append("‚Ä¢ ");
            sb.append(p.toString());
            sb.append("\n");
        }
        
        sb.append("\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
        return sb.toString();
    }*/
}
